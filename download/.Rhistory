plotExp_PStay_Trial + stat_summary(fun.data=data_summary, color="black")+labs(title="P(Stay) over Trials")
plotExp_RT_Trial + stat_summary(fun.data=data_summary, color="black")+labs(title="RT over Trials")
plotExp_PStay_Difference + stat_summary(fun.data=data_summary, color="black")+labs(title="P(Stay) over Difference in Coherence")
#plotExp_PStay_Trial_Difference + stat_summary(fun.data=data_summary, color="black")+labs(title="P(Stay) over Trials and Difference in Coherence")
plotExp_RT_Difference + stat_summary(fun.data=data_summary, color="black")+labs(title="RT over Difference in Coherence")
#plotExp_RT_Trial_Difference + stat_summary(fun.data=data_summary, color="black")+labs(title="RT over Trials and Difference in Coherence")
plotExp_PStay_Level + stat_summary(fun.data=data_summary, color="black")+labs(title="P(Stay) over Mean Levels of Coherence")
plotExp_PStay_Trial_Level + stat_summary(fun.data=data_summary, color="black")+labs(title="P(Stay) over Trials and Mean Levels of Coherence")
plotExp_RT_Level + stat_summary(fun.data=data_summary, color="black")+labs(title="RT over Mean Levels of Coherence")
plotExp_RT_Trial_Level + stat_summary(fun.data=data_summary, color="black")+labs(title="RT over Trials and Mean Levels of Coherence")
plotExp_PStay_Acc + stat_summary(fun.data=data_summary, color="black")+labs(title="P(Stay) against RDK Accuracy")
plotExp_PStay_Acc_Cond + stat_summary(fun.data=data_summary, color="black")+labs(title="P(Stay) against RDK Accuracy across Conditions")
plotExp_RT_Acc_Cond + stat_summary(fun.data=data_summary, color="black")+labs(title="Stay-Switch RT against RDK Accuracy across Conditions")
dev.off()
########################################################################
#Plot Accuracy By Coherence (coloured by subject id); excluding 0.8 coherence in practice
data_summary <- function(x) {
m <- mean(x)
ymin <- m-1.96*(sd(x) / sqrt(length(x)))
ymax <- m+1.96*(sd(x) / sqrt(length(x)))
return(c(y=m,ymin=ymin,ymax=ymax))
}
plotTraining_accuracy <- aggregate(trialdata_practice$acc,by=list(trialdata_practice$sub,trialdata_practice$coherence),mean) %>%
rename("Sub"="Group.1","Coherence"="Group.2","Accuracy"="x") %>%
filter(Coherence!=0.8) %>%
ggplot(aes(x=Coherence,y=Accuracy,col=Sub)) +
geom_jitter(aes(alpha=0.8),position=position_jitter(width=0.02)) + theme_bw() + theme(legend.position="none")
plotTraining_accuracy + stat_summary(fun.data=data_summary, color="black")
#Plot RT By Coherence (coloured by subject id); excluding 0.8 coherence in practice
plotTraining_RT <- aggregate(trialdata_practice$rt1,by=list(trialdata_practice$sub,trialdata_practice$coherence),mean) %>%
rename("Sub"="Group.1","Coherence"="Group.2","RT"="x") %>%
filter(Coherence!=0.8) %>%
ggplot(aes(x=Coherence,y=RT,col=Sub)) +
geom_jitter(aes(alpha=0.8),position=position_jitter(width=0.02)) + theme_bw() + theme(legend.position="none")
plotTraining_RT + stat_summary(fun.data=data_summary, color="black")
#To see overall RT distribution
#hist(trialdata_practice$rt1)
########################################################################
########################### EXPERIMENT BLOCK ###########################
########################################################################
##LABELS##
cond.labs <- c("Low Diff, M = 0.15","High Diff, M = 0.2","High Diff, M = 0.3", "Low Diff, M = 0.35")
names(cond.labs) <- c("0.15","0.2","0.3","0.35")
stay.labs <- c("Switch","Stay")
names(stay.labs) <- c("FALSE","TRUE")
diff.labs = c("Low","High")
names(diff.labs) <- c(0.1,0.2)
##########
#P(Stay) Over Trials
plotExp_PStay_Trial <- aggregate(trialdata_experiment$stay,by=list(trialdata_experiment$sub,trialdata_experiment$trial),mean) %>%
rename("Sub"="Group.1","Trial"="Group.2","PropStay"="x") %>%
filter(Trial!=20) %>%
ggplot(aes(x=Trial,y=PropStay,col=Sub)) +
geom_jitter(aes(alpha=0.8),position=position_jitter(width=0.1)) + theme_bw() + theme(legend.position="none")
plotExp_PStay_Trial + stat_summary(fun.data=data_summary, color="black")
#RT Over Trials
plotExp_RT_Trial <- aggregate(trialdata_experiment$rt2,by=list(trialdata_experiment$sub,trialdata_experiment$trial,trialdata_experiment$stay),mean) %>%
rename("Sub"="Group.1","Trial"="Group.2","Stay"="Group.3","RT"="x") %>%
filter(Trial!=20) %>%
ggplot(aes(x=Trial,y=RT,col=Sub)) +
geom_jitter(aes(alpha=0.8),position=position_jitter(width=0.1)) + theme_bw() + theme(legend.position="none") +
facet_grid(Stay~.,labeller=labeller(Stay=stay.labs))
plotExp_RT_Trial + stat_summary(fun.data=data_summary, color="black")
#P(Stay) in High difference (10v30, 20v40) vs Low difference (10v20, 30v40)
plotExp_PStay_Difference <- aggregate(trialdata_experiment$stay,by=list(trialdata_experiment$sub,as.factor(trialdata_experiment$difference)),mean,na.rm=TRUE) %>%
rename("Sub"="Group.1","Difference"="Group.2","PropStay"="x") %>%
ggplot(aes(x=Difference,y=PropStay,col=Sub)) +
geom_point(aes(alpha=0.8,group=Sub)) + geom_line(aes(alpha=0.8, group=Sub),linetype="dashed") +
scale_x_discrete(breaks=c(0.1,0.2),labels=c("Low","High"))+
theme_bw() + theme(legend.position="none")
plotExp_PStay_Difference + stat_summary(fun.data=data_summary, color="black")
#
# ###BY TRIAL
# plotExp_PStay_Trial_Difference <- aggregate(trialdata_experiment$stay,by=list(trialdata_experiment$sub,trialdata_experiment$trial,trialdata_experiment$difference),mean) %>%
#   rename("Sub"="Group.1","Trial"="Group.2","Difference"="Group.3","PropStay"="x") %>%
#   filter(Trial!=20) %>%
#   ggplot(aes(x=Trial,y=PropStay,col=Sub)) +
#   geom_jitter(aes(alpha=0.8),position=position_jitter(width=0.1)) + theme_bw() + theme(legend.position="none") +
#   facet_grid(Difference~.,labeller=labeller(Difference=diff.labs))
#
# plotExp_PStay_Trial_Difference + stat_summary(fun.data=data_summary, color="black")
#
#RT(for stay + switch) in High difference vs Low difference
plotExp_RT_Difference <- aggregate(trialdata_experiment$rt2,by=list(trialdata_experiment$sub,as.factor(trialdata_experiment$difference)),mean,na.rm=TRUE) %>%
rename("Sub"="Group.1","Difference"="Group.2","RT"="x") %>%
ggplot(aes(x=Difference,y=RT,col=Sub)) +
geom_point(aes(alpha=0.8,group=Sub)) + geom_line(aes(alpha=0.8, group=Sub),linetype="dashed") +
scale_x_discrete(breaks=c(0.1,0.2),labels=c("Low","High"))+
theme_bw() + theme(legend.position="none")
plotExp_RT_Difference + stat_summary(fun.data=data_summary, color="black")
#
# ##BY TRIAL
# plotExp_RT_Trial_Difference <- aggregate(trialdata_experiment$rt2,by=list(trialdata_experiment$sub,trialdata_experiment$trial,trialdata_experiment$stay, trialdata_experiment$difference),mean) %>%
#   rename("Sub"="Group.1","Trial"="Group.2","Stay"="Group.3","Difference"="Group.4","RT"="x") %>%
#   filter(Trial!=20) %>%
#   ggplot(aes(x=Trial,y=RT,col=Sub)) +
#   geom_jitter(aes(alpha=0.8),position=position_jitter(width=0.1)) + theme_bw() + theme(legend.position="none") +
#   facet_grid(Stay~Difference,labeller=labeller(Stay=stay.labs,Difference=diff.labs))
#
# plotExp_RT_Trial_Difference + stat_summary(fun.data=data_summary, color="black")
#P(Stay) across mean difficulty levels
plotExp_PStay_Level <- aggregate(trialdata_experiment$stay,by=list(trialdata_experiment$sub,as.factor(trialdata_experiment$level)),mean,na.rm=TRUE) %>%
rename("Sub"="Group.1","Level"="Group.2","PropStay"="x") %>%
ggplot(aes(x=Level,y=PropStay,col=Sub)) +
geom_point(aes(alpha=0.8,group=Sub)) + geom_line(aes(alpha=0.8, group=Sub),linetype="dashed") +
theme_bw() + theme(legend.position="none")
plotExp_PStay_Level + stat_summary(fun.data=data_summary, color="black")
###BY TRIAL
#aggregate(trialdata_experiment$stay,by=list(trialdata_experiment$trial,trialdata_experiment$level),FUN = function(x) cbind(m = mean(x,na.rm=TRUE), std = sd(x,na.rm=TRUE)))
plotExp_PStay_Trial_Level <- aggregate(trialdata_experiment$stay,by=list(trialdata_experiment$trial,trialdata_experiment$level),mean,na.rm=TRUE) %>%
mutate(std=aggregate(trialdata_experiment$stay,by=list(trialdata_experiment$trial,trialdata_experiment$level),sd,na.rm=TRUE)$x)%>%
rename("Trial"="Group.1","Level"="Group.2","PStay"="x","std"="std") %>%
filter(Trial!=20) %>%
ggplot(aes(x=Trial,y=PStay)) +
geom_point(aes(alpha=0.8),position=position_jitter(width=0.1)) + geom_line(aes(alpha=0.8),linetype="dashed")+
geom_errorbar(aes(ymin=PStay-std, ymax=PStay+std), width=.2)+
theme_bw() + theme(legend.position="none") +
facet_grid(Level~.,labeller=labeller(Level=cond.labs))
#RT(for stay + switch) across mean difficulty levels
plotExp_RT_Level <- aggregate(trialdata_experiment$rt2,by=list(trialdata_experiment$sub,as.factor(trialdata_experiment$level)),mean,na.rm=TRUE) %>%
rename("Sub"="Group.1","Level"="Group.2","RT"="x") %>%
ggplot(aes(x=Level,y=RT,col=Sub)) +
geom_point(aes(alpha=0.8,group=Sub)) + geom_line(aes(alpha=0.8, group=Sub),linetype="dashed") +
theme_bw() + theme(legend.position="none")
plotExp_RT_Level + stat_summary(fun.data=data_summary, color="black")
##BY TRIAL
plotExp_RT_Trial_Level <- aggregate(trialdata_experiment$rt2,by=list(trialdata_experiment$trial,trialdata_experiment$stay, trialdata_experiment$level),mean) %>%
mutate(std=aggregate(trialdata_experiment$rt2,by=list(trialdata_experiment$trial,trialdata_experiment$stay, trialdata_experiment$level),mean)$x) %>%
rename("Trial"="Group.1","Stay"="Group.2","Level"="Group.3","RT"="x","std"="std") %>%
filter(Trial!=20) %>%
ggplot(aes(x=Trial,y=RT)) +
geom_point(aes(alpha=0.8),position=position_jitter(width=0.1)) + geom_line(aes(alpha=0.8),linetype="dashed")+
geom_errorbar(aes(ymin=RT-std, ymax=RT+std), width=.2)+
theme_bw() + theme(legend.position="none")+
facet_grid(Stay~Level,labeller=labeller(Stay=stay.labs,Level=cond.labs))
plotExp_RT_Trial_Level
#PStay as a function of accuracy for various conditions
##Overall
plotExp_PStay_Acc <- aggregate(trialdata_experiment$stay,by=list(trialdata_experiment$sub,trialdata_experiment$acc),mean,na.rm=TRUE) %>%
rename("Sub"="Group.1","Acc"="Group.2","PStay"="x") %>%
ggplot(aes(x=Acc,y=PStay,col=Sub)) +
geom_point(aes(alpha=0.8,group=Sub)) + geom_line(aes(alpha=0.8, group=Sub),linetype="dashed") +
theme_bw() + theme(legend.position="none")
#facet_grid(Stay~Level,labeller=labeller(Stay=stay.labs))
plotExp_PStay_Acc + stat_summary(fun.data=data_summary, color="black")
##Conditions
plotExp_PStay_Acc_Cond <- aggregate(trialdata_experiment$stay,by=list(trialdata_experiment$sub,trialdata_experiment$acc,trialdata_experiment$level,trialdata_experiment$coherence),mean,na.rm=TRUE) %>%
rename("Sub"="Group.1","Acc"="Group.2","Level"="Group.3","Coherence"="Group.4","PStay"="x") %>%
ggplot(aes(x=Acc,y=PStay,col=Sub)) +
geom_point(aes(alpha=0.8,group=Sub)) + geom_line(aes(alpha=0.8, group=Sub),linetype="dashed") +
theme_bw() + theme(legend.position="none")+
facet_grid(.~Level+Coherence,labeller=labeller(Level=cond.labs))
plotExp_PStay_Acc_Cond + stat_summary(fun.data=data_summary, color="black")
#RT (Stay & Switch) as a function of accuracy for various conditions
##Overall
plotExp_RT_Acc <- aggregate(trialdata_experiment$rt2,by=list(trialdata_experiment$sub,trialdata_experiment$acc),mean,na.rm=TRUE) %>%
rename("Sub"="Group.1","Acc"="Group.2","RT"="x") %>%
ggplot(aes(x=Acc,y=RT,col=Sub)) +
geom_point(aes(alpha=0.8,group=Sub)) + geom_line(aes(alpha=0.8, group=Sub),linetype="dashed") +
theme_bw() + theme(legend.position="none")
#facet_grid(Stay~Level,labeller=labeller(Stay=stay.labs))
plotExp_RT_Acc + stat_summary(fun.data=data_summary, color="black")
#Conditions
plotExp_RT_Acc_Cond <- aggregate(trialdata_experiment$rt2,by=list(trialdata_experiment$sub,trialdata_experiment$acc,trialdata_experiment$level,trialdata_experiment$coherence,trialdata_experiment$stay),mean,na.rm=TRUE) %>%
rename("Sub"="Group.1","Acc"="Group.2","Level"="Group.3","Coherence"="Group.4","Stay"="Group.5","RT"="x") %>%
ggplot(aes(x=Acc,y=RT,col=Sub)) +
geom_point(aes(alpha=0.8,group=Sub)) + geom_line(aes(alpha=0.8, group=Sub),linetype="dashed") +
theme_bw() + theme(legend.position="none")+
facet_grid(Stay~Level+Coherence,labeller=labeller(Stay=stay.labs,Level=cond.labs))
plotExp_RT_Acc_Cond + stat_summary(fun.data=data_summary, color="black")
########################################################################
############################ GENERATE PDFS #############################
########################################################################
#Save PDF with training data plots
pdf("Training_Plots.pdf",bg="transparent")
plotTraining_accuracy + stat_summary(fun.data=data_summary, color="black")
plotTraining_RT + stat_summary(fun.data=data_summary, color="black")
dev.off()
#Save PDF with experiment data plots
pdf("Experiment_Plots.pdf",bg="transparent",width=12,height=8)
plotExp_PStay_Trial + stat_summary(fun.data=data_summary, color="black")+labs(title="P(Stay) over Trials")
plotExp_RT_Trial + stat_summary(fun.data=data_summary, color="black")+labs(title="RT over Trials")
plotExp_PStay_Difference + stat_summary(fun.data=data_summary, color="black")+labs(title="P(Stay) over Difference in Coherence")
#plotExp_PStay_Trial_Difference + stat_summary(fun.data=data_summary, color="black")+labs(title="P(Stay) over Trials and Difference in Coherence")
plotExp_RT_Difference + stat_summary(fun.data=data_summary, color="black")+labs(title="RT over Difference in Coherence")
#plotExp_RT_Trial_Difference + stat_summary(fun.data=data_summary, color="black")+labs(title="RT over Trials and Difference in Coherence")
plotExp_PStay_Level + stat_summary(fun.data=data_summary, color="black")+labs(title="P(Stay) over Mean Levels of Coherence")
plotExp_PStay_Trial_Level + stat_summary(fun.data=data_summary, color="black")+labs(title="P(Stay) over Trials and Mean Levels of Coherence")
plotExp_RT_Level + stat_summary(fun.data=data_summary, color="black")+labs(title="RT over Mean Levels of Coherence")
plotExp_RT_Trial_Level + stat_summary(fun.data=data_summary, color="black")+labs(title="RT over Trials and Mean Levels of Coherence")
plotExp_PStay_Acc + stat_summary(fun.data=data_summary, color="black")+labs(title="P(Stay) against RDK Accuracy")
plotExp_PStay_Acc_Cond + stat_summary(fun.data=data_summary, color="black")+labs(title="P(Stay) against RDK Accuracy across Conditions")
plotExp_RT_Acc_Cond + stat_summary(fun.data=data_summary, color="black")+labs(title="Stay-Switch RT against RDK Accuracy across Conditions")
dev.off()
########################################################################
subjectdata[subjectdata$subject=="dots_7TMTbxXGGk",]
subjectdata[subjectdata$subject=="dots_SFwwunwp60",]
mydata = readtext("mydata.json",text_field = "content")
alldatalist = list()
for (i in 1:nrow(mydata)) {
alldatalist[[i]] = data.frame(fromJSON(txt = mydata$text[i],flatten = TRUE,simplifyDataFrame = TRUE))
}
alldata = do.call(bind_rows,alldatalist)
####################################
## Data cleaning
#Extract trial/SS data
alldata_trial <- alldata %>% filter(trial_type == "rdk") %>% select(!c(matches("dot|aperture|frame|fixation|canvas|border",perl=TRUE),
move_distance,background_color,reinsert_type)) #Note - need to check if practice excluded
alldata_stayswitch <- alldata %>% filter(trial_event == "Patch selection") %>% select(subject,blkNumber,rt)
#Form master from trial data
alltrialdata <- alldata_trial %>% rename("sub"="subject","blk"="blkNumber","whichPatch"="trial_event","direction"="coherent_direction","resp"="response","corrResp"="correct_choice",
"acc"="correct","rt1"="rt") %>% select(sub,blk,whichPatch,direction,resp,corrResp,acc,rt1,coherence,coh_alt) %>%
group_by(sub,blk) %>% mutate(trial = row_number()) %>% ungroup() %>%
mutate(resp = case_when(resp == "FALSE" ~ "NA" , TRUE ~ resp)) %>%
mutate(direction=unlist(direction))%>%
relocate(sub,blk,trial,whichPatch,coherence,direction,resp,corrResp,acc,rt1,coh_alt)
#Form stayswitch RT data
ssdata <- alldata_stayswitch %>% rename("sub"="subject","blk"="blkNumber","rt2"="rt") %>% group_by(sub,blk) %>% mutate(trial = row_number()) %>% ungroup()
#Merge ss RT data
alltrialdata %<>% left_join(ssdata,by = c("sub","blk","trial"))
#Generate SS choice
alltrialdata %<>% group_by(sub,blk) %>% mutate(stay = (whichPatch == lead(whichPatch,order_by = trial))) %>% mutate(stay = case_when(trial == 20 ~ NA , TRUE ~ stay))
#Separate out experiment vs practice
trialdata_practice <- alltrialdata %>% filter(whichPatch == "Practice") %>% select(!c(coh_alt,rt2,stay))
trialdata_experiment <- alltrialdata %>% filter(whichPatch != "Practice")
#Add conditions to experiment
#Odd bug with difference variable -> unique(..$difference) with simple abs(coherence-coh_alt) spits out 0.1 0.1 0.2 0.2
trialdata_experiment <- trialdata_experiment %>% mutate(difference=as.numeric(as.character(abs(coherence-coh_alt))),level=rowMeans(cbind(coherence,coh_alt)))
## Get subject level data
#trial_index == 9 -> virtual chinrest result
alldata_subject <- alldata %>% filter((trial_type == "survey-multi-choice" | trial_type == "survey-text" | trial_event == "final_debrief" | trial_index==9)) %>%
select(subject,stimulus,responses,trial_type,trial_index) %>% mutate(bonus=NA,age=NA,gender=NA,vision=NA,colorblind=NA,distance=NA)
for (ii in 1:nrow(alldata_subject)) {
if (alldata_subject$trial_type[ii] == "survey-text") {
resp_agegender <- fromJSON(alldata_subject$responses[ii])
alldata_subject$age[ii] <- resp_agegender$Age
alldata_subject$gender[ii] <- resp_agegender$Gender
} else if (alldata_subject$trial_type[ii] == "survey-multi-choice") {
resp_vision <- fromJSON(alldata_subject$responses[ii])
alldata_subject$vision[ii] <- resp_vision$Vision
alldata_subject$colorblind[ii] <- resp_vision$Colorblind
} else if (alldata_subject$trial_index[ii]==9){
alldata_subject$distance[ii] <- as.numeric(str_extract_all(alldata_subject$stimulus[ii],"(?<=screen is)(\\s+)([0-9.]+)"))
} else if (!is.na(alldata_subject$stimulus[ii])) {
alldata_subject$bonus[ii] <- as.numeric(str_extract_all(alldata_subject$stimulus[ii],"(?<=bonus of\\s\\$)([0-9.]+)"))
}
}
alldata_subject %<>% select(subject,bonus,age,gender,vision,colorblind,distance)
#Summary of subject no. with bonus, age, gender, normal/corrected vision, colourblind, distance as measured by virtual chinrest
subjectdata <- alldata_subject %>% select(subject,bonus) %>% filter(!is.na(bonus)) %>%
left_join(alldata_subject %>% select(subject,age,gender) %>% filter(age != "<NA>"),by = c("subject")) %>%
left_join(alldata_subject %>% select(subject,vision,colorblind) %>% filter(vision != "<NA>"),by = c("subject")) %>%
left_join(alldata_subject %>% select(subject,distance) %>% filter(distance != "<NA>"),by = c("subject"))
subjectdata[subjectdata$subject=="dots_rA29YyDm8w",]
subjectdata
unique(alldata$subject)
unique(alldata$subject)=="dots_rA29YyDm8w"
install.packags("MTurkR")
install.packages("MTurkR")
mydata = readtext("mydata.json",text_field = "content")
alldatalist = list()
for (i in 1:nrow(mydata)) {
alldatalist[[i]] = data.frame(fromJSON(txt = mydata$text[i],flatten = TRUE,simplifyDataFrame = TRUE))
}
alldata = do.call(bind_rows,alldatalist)
####################################
## Data cleaning
#Extract trial/SS data
alldata_trial <- alldata %>% filter(trial_type == "rdk") %>% select(!c(matches("dot|aperture|frame|fixation|canvas|border",perl=TRUE),
move_distance,background_color,reinsert_type)) #Note - need to check if practice excluded
alldata_stayswitch <- alldata %>% filter(trial_event == "Patch selection") %>% select(subject,blkNumber,rt)
#Form master from trial data
alltrialdata <- alldata_trial %>% rename("sub"="subject","blk"="blkNumber","whichPatch"="trial_event","direction"="coherent_direction","resp"="response","corrResp"="correct_choice",
"acc"="correct","rt1"="rt") %>% select(sub,blk,whichPatch,direction,resp,corrResp,acc,rt1,coherence,coh_alt) %>%
group_by(sub,blk) %>% mutate(trial = row_number()) %>% ungroup() %>%
mutate(resp = case_when(resp == "FALSE" ~ "NA" , TRUE ~ resp)) %>%
mutate(direction=unlist(direction))%>%
relocate(sub,blk,trial,whichPatch,coherence,direction,resp,corrResp,acc,rt1,coh_alt)
#Form stayswitch RT data
ssdata <- alldata_stayswitch %>% rename("sub"="subject","blk"="blkNumber","rt2"="rt") %>% group_by(sub,blk) %>% mutate(trial = row_number()) %>% ungroup()
#Merge ss RT data
alltrialdata %<>% left_join(ssdata,by = c("sub","blk","trial"))
#Generate SS choice
alltrialdata %<>% group_by(sub,blk) %>% mutate(stay = (whichPatch == lead(whichPatch,order_by = trial))) %>% mutate(stay = case_when(trial == 20 ~ NA , TRUE ~ stay))
#Separate out experiment vs practice
trialdata_practice <- alltrialdata %>% filter(whichPatch == "Practice") %>% select(!c(coh_alt,rt2,stay))
trialdata_experiment <- alltrialdata %>% filter(whichPatch != "Practice")
#Add conditions to experiment
#Odd bug with difference variable -> unique(..$difference) with simple abs(coherence-coh_alt) spits out 0.1 0.1 0.2 0.2
trialdata_experiment <- trialdata_experiment %>% mutate(difference=as.numeric(as.character(abs(coherence-coh_alt))),level=rowMeans(cbind(coherence,coh_alt)))
## Get subject level data
#trial_index == 9 -> virtual chinrest result
alldata_subject <- alldata %>% filter((trial_type == "survey-multi-choice" | trial_type == "survey-text" | trial_event == "final_debrief" | trial_index==9)) %>%
select(subject,stimulus,responses,trial_type,trial_index) %>% mutate(bonus=NA,age=NA,gender=NA,vision=NA,colorblind=NA,distance=NA)
for (ii in 1:nrow(alldata_subject)) {
if (alldata_subject$trial_type[ii] == "survey-text") {
resp_agegender <- fromJSON(alldata_subject$responses[ii])
alldata_subject$age[ii] <- resp_agegender$Age
alldata_subject$gender[ii] <- resp_agegender$Gender
} else if (alldata_subject$trial_type[ii] == "survey-multi-choice") {
resp_vision <- fromJSON(alldata_subject$responses[ii])
alldata_subject$vision[ii] <- resp_vision$Vision
alldata_subject$colorblind[ii] <- resp_vision$Colorblind
} else if (alldata_subject$trial_index[ii]==9){
alldata_subject$distance[ii] <- as.numeric(str_extract_all(alldata_subject$stimulus[ii],"(?<=screen is)(\\s+)([0-9.]+)"))
} else if (!is.na(alldata_subject$stimulus[ii])) {
alldata_subject$bonus[ii] <- as.numeric(str_extract_all(alldata_subject$stimulus[ii],"(?<=bonus of\\s\\$)([0-9.]+)"))
}
}
alldata_subject %<>% select(subject,bonus,age,gender,vision,colorblind,distance)
#Summary of subject no. with bonus, age, gender, normal/corrected vision, colourblind, distance as measured by virtual chinrest
subjectdata <- alldata_subject %>% select(subject,bonus) %>% filter(!is.na(bonus)) %>%
left_join(alldata_subject %>% select(subject,age,gender) %>% filter(age != "<NA>"),by = c("subject")) %>%
left_join(alldata_subject %>% select(subject,vision,colorblind) %>% filter(vision != "<NA>"),by = c("subject")) %>%
left_join(alldata_subject %>% select(subject,distance) %>% filter(distance != "<NA>"),by = c("subject"))
dim(subjectdata)
subjectdata[subjectdata$subject=="dots_u70hhWxEFS",]
hist(subjectdata$distance)
mean(subjectdata$distance)
median(subjectdata$distance)
mean(subjectdata$bonus)
subjectdata[subjectdata$subject=="dots_SrKdF8AzyV",]
subjectdata[subjectdata$subject=="dots_ONVICNASsE",]
subjectdata[subjectdata$subject=="dots_5mQ3rVtMJv",]
subjectdata[subjectdata$subject=="dots_qLch6fONjq",]
subjectdata[subjectdata$subject=="dots_7TMTbxXGGk",]
subjectdata[subjectdata$subject=="dots_n5praNm4go",]
subjectdata[subjectdata$subject=="dots_QhXCfkJbxW",]
subjectdata[subjectdata$subject=="dots_7TMTbxXGGk",]
subjectdata[subjectdata$subject=="dots_7drv4wIY6k",]
subjectdata[subjectdata$subject=="dots_fzSq8pux2C",]
mydata = readtext("mydata.json",text_field = "content")
alldatalist = list()
for (i in 1:nrow(mydata)) {
alldatalist[[i]] = data.frame(fromJSON(txt = mydata$text[i],flatten = TRUE,simplifyDataFrame = TRUE))
}
alldata = do.call(bind_rows,alldatalist)
####################################
## Data cleaning
#Extract trial/SS data
alldata_trial <- alldata %>% filter(trial_type == "rdk") %>% select(!c(matches("dot|aperture|frame|fixation|canvas|border",perl=TRUE),
move_distance,background_color,reinsert_type)) #Note - need to check if practice excluded
alldata_stayswitch <- alldata %>% filter(trial_event == "Patch selection") %>% select(subject,blkNumber,rt)
#Form master from trial data
alltrialdata <- alldata_trial %>% rename("sub"="subject","blk"="blkNumber","whichPatch"="trial_event","direction"="coherent_direction","resp"="response","corrResp"="correct_choice",
"acc"="correct","rt1"="rt") %>% select(sub,blk,whichPatch,direction,resp,corrResp,acc,rt1,coherence,coh_alt) %>%
group_by(sub,blk) %>% mutate(trial = row_number()) %>% ungroup() %>%
mutate(resp = case_when(resp == "FALSE" ~ "NA" , TRUE ~ resp)) %>%
mutate(direction=unlist(direction))%>%
relocate(sub,blk,trial,whichPatch,coherence,direction,resp,corrResp,acc,rt1,coh_alt)
#Form stayswitch RT data
ssdata <- alldata_stayswitch %>% rename("sub"="subject","blk"="blkNumber","rt2"="rt") %>% group_by(sub,blk) %>% mutate(trial = row_number()) %>% ungroup()
#Merge ss RT data
alltrialdata %<>% left_join(ssdata,by = c("sub","blk","trial"))
#Generate SS choice
alltrialdata %<>% group_by(sub,blk) %>% mutate(stay = (whichPatch == lead(whichPatch,order_by = trial))) %>% mutate(stay = case_when(trial == 20 ~ NA , TRUE ~ stay))
#Separate out experiment vs practice
trialdata_practice <- alltrialdata %>% filter(whichPatch == "Practice") %>% select(!c(coh_alt,rt2,stay))
trialdata_experiment <- alltrialdata %>% filter(whichPatch != "Practice")
#Add conditions to experiment
#Odd bug with difference variable -> unique(..$difference) with simple abs(coherence-coh_alt) spits out 0.1 0.1 0.2 0.2
trialdata_experiment <- trialdata_experiment %>% mutate(difference=as.numeric(as.character(abs(coherence-coh_alt))),level=rowMeans(cbind(coherence,coh_alt)))
## Get subject level data
#trial_index == 9 -> virtual chinrest result
alldata_subject <- alldata %>% filter((trial_type == "survey-multi-choice" | trial_type == "survey-text" | trial_event == "final_debrief" | trial_index==9)) %>%
select(subject,stimulus,responses,trial_type,trial_index) %>% mutate(bonus=NA,age=NA,gender=NA,vision=NA,colorblind=NA,distance=NA)
for (ii in 1:nrow(alldata_subject)) {
if (alldata_subject$trial_type[ii] == "survey-text") {
resp_agegender <- fromJSON(alldata_subject$responses[ii])
alldata_subject$age[ii] <- resp_agegender$Age
alldata_subject$gender[ii] <- resp_agegender$Gender
} else if (alldata_subject$trial_type[ii] == "survey-multi-choice") {
resp_vision <- fromJSON(alldata_subject$responses[ii])
alldata_subject$vision[ii] <- resp_vision$Vision
alldata_subject$colorblind[ii] <- resp_vision$Colorblind
} else if (alldata_subject$trial_index[ii]==9){
alldata_subject$distance[ii] <- as.numeric(str_extract_all(alldata_subject$stimulus[ii],"(?<=screen is)(\\s+)([0-9.]+)"))
} else if (!is.na(alldata_subject$stimulus[ii])) {
alldata_subject$bonus[ii] <- as.numeric(str_extract_all(alldata_subject$stimulus[ii],"(?<=bonus of\\s\\$)([0-9.]+)"))
}
}
alldata_subject %<>% select(subject,bonus,age,gender,vision,colorblind,distance)
#Summary of subject no. with bonus, age, gender, normal/corrected vision, colourblind, distance as measured by virtual chinrest
subjectdata <- alldata_subject %>% select(subject,bonus) %>% filter(!is.na(bonus)) %>%
left_join(alldata_subject %>% select(subject,age,gender) %>% filter(age != "<NA>"),by = c("subject")) %>%
left_join(alldata_subject %>% select(subject,vision,colorblind) %>% filter(vision != "<NA>"),by = c("subject")) %>%
left_join(alldata_subject %>% select(subject,distance) %>% filter(distance != "<NA>"),by = c("subject"))
subjectdata[subjectdata$subject=="dots_fzSq8pux2C",]
subjectdata[subjectdata$subject=="dots_JmKRaMGHay",]
subjectdata[subjectdata$subject=="dots_nqvqN82B9n",]
subjectdata[subjectdata$subject=="dots_10CzGMILv5",]
subjectdata[subjectdata$subject=="dots_kPOEwwPNEZ",]
subjectdata[subjectdata$subject=="dots_eLBaJD7EA2",]
subjectdata[subjectdata$subject=="dots_qdeZpVCpUj",]
subjectdata[subjectdata$subject=="dots_PLD1AvwzDb",]
subjectdata[subjectdata$subject=="dots_DyfjixjkxC",]
hist(subjectdata$distance)
count(subjectdata$distance>100)
length(subjectdata$distance>100)
length(subjectdata$distance[subjectdata$distance>100])
subjectdata[subjectdata$subject=="dots_G3GbxYxcaz",]
subjectdata[subjectdata$subject=="dots_WVKr3nVFqG",]
subjectdata[subjectdata$subject=="dots_5MVGqsCVDz",]
subjectdata[subjectdata$subject=="dots_EMVxC9g0fo",]
subjectdata[subjectdata$subject=="dots_m5lhJDflMo",]
subjectdata[subjectdata$subject=="dots_JYib1dXcwW",]
subjectdata[subjectdata$subject=="dots_F6ijfbZrwa",]
subjectdata[subjectdata$subject=="dots_MVVmgJUSF3",]
subjectdata[subjectdata$subject=="dots_M4ZZbZ0o0M",]
subjectdata[subjectdata$subject=="dots_r6bNvyezMj",]
subjectdata[subjectdata$subject=="dots_rWdYrmDYfM",]
subjectdata[subjectdata$subject=="dots_SdCrn4odgy",]
subjectdata[subjectdata$subject=="dots_hhpDUxFYLK",]
dim(subjectdata)
subjectdata$subject
subjectdata[subjectdata$subject=="dots_hhpDUxFYL",]
subjectdata[subjectdata$subject=="dots_WENEWeiGcq",]
subjectdata[subjectdata$subject=="dots_hhpDUxFYLK",]
subjectdata[subjectdata$subject=="dots_qr4Yu55QNI",]
subjectdata[subjectdata$subject=="dots_LbW4cUrObJ",]
subjectdata[subjectdata$subject=="dots_7TMTbxXGGk",]
subjectdata[subjectdata$subject=="dots_3uWOyqUYGY",]
subjectdata[subjectdata$subject=="dots_rA29YyDm8w",]
batch <- read.csv("/Users/deborahlin/Downloads/Batch_4315620_batch_results",header=TRUE)
batch <- read.csv("/Users/deborahlin/Downloads/Batch_4315620_batch_results.csv",header=TRUE)
summary(batch)
batch$Answer.surveycode
batch$Answer.surveycode==subjectdata$subject
for (i in 1:length(batch$Answer.surveycode)){}
i
batch$Answer.surveycode[i] %in% subjectdata$subject
real <- vector(length=length(batch$Answer.surveycode))
for (i in 1:length(batch$Answer.surveycode)){
real[i] <- batch$Answer.surveycode[i] %in% subjectdata$subject
}
real
real[22]
real[41]
real[49]
real[63]
batch2 <- read.csv("/Users/deborahlin/Downloads/Batch_4312789_batch_results.csv",header=TRUE)
dim(batch)
allbatch <- rbind(batch,batch2)
dim(allbatch)
unmatched_turk <- batch$Answer.surveycode[c(22,41,49,63)]
unmatched_turk
matched_codes <- vector(length=length(subjectdata$subject))
matched_codes <- vector(length=length(subjectdata$subject))
for (i in 1:length(subjectdata$subject)){
matched_codes[i] <- subjectdata$subject %in% allbatch$Answer.surveycode
}
allbatch$Answer.surveycode
subjectdata$subject
matched_codes <- vector(length=length(subjectdata$subject))
for (i in 1:length(subjectdata$subject)){
matched_codes[i] <- subjectdata$subject[i] %in% allbatch$Answer.surveycode
}
matched_codes
which(is.false(matched_codes))
which(matched_codes==False)
which(matched_codes==FALSE)
matched_codes[25]
subjectdata$subject[25]
subjectdata$subject[c(25,32)]
unmatched_turk
plot(subjectdata$bonus~subjectdata$age)
subjectdata[c(25,32)]
subjectdata[c(25,32),]
hist(subjectdata$distance,bins=100)
hist(subjectdata$distance)
?hist
hist(subjectdata$distance)
qt(c(.1,.3,.5,.7,.9),subjectdata$distance)
qt(p=c(.1,.3,.5,.7,.9),subjectdata$distance)
qts(p=c(.1,.3,.5,.7,.9),subjectdata$distance)
quantiles(p=c(.1,.3,.5,.7,.9),subjectdata$distance)
?qt
quantile(p=c(.1,.3,.5,.7,.9),subjectdata$distance)
subjectdata$subject[1]
subjectdata$subject[2]
subjectdata$subject[11]
unmatched_turk
unmatched_codes
unmatched_codes <- subjectdata$subject[c(25,32)]
unmatched_codes
library(rjsonlite)
library(plyr)
library(stringr)
install.packages("rjsonlite")
con <- file("bbccouk-recipes.json", "r")
input <- readLines(con, -1L)
close(con)
bbc_recipes <- ldply(lapply(input, function(x) t(unlist(fromJSON(x)))))
bbc_df <- as.data.frame(bbc_recipes)
bbc_df <- data.frame(lapply(bbc_df, as.character), stringsAsFactors=FALSE)
#to see columns, colnames(bbc_df)
#relevant columns are title, chef, chef_id(?), program, program_id(?), ingredients
bbc_cookie_df <- bbc_df[grep("Cookie|cookie", bbc_df$title), ]
bbc_cake_df <- bbc_df[grep("Cake|cake",bbc_df$title),]
save(bbc_df,bbc_cookie_df,bbc_cake_df,file="bbc.RData")
############################################################
con <- file("allrecipes-recipes.json", "r")
input <- readLines(con, -1L)
close(con)
AR_recipes <- ldply(lapply(input, function(x) t(unlist(fromJSON(x)))))
AR_df <- as.data.frame(AR_recipes)
AR_df <- data.frame(lapply(AR_df, as.character), stringsAsFactors=FALSE)
#relevant columns are author, rating_stars, review_count, title
AR_cookie_df <- AR_df[grep("Cookie|cookie", AR_df$title), ]
AR_cake_df <- AR_df[grep("Cake", AR_df$title), ]
pwd
getwd()
